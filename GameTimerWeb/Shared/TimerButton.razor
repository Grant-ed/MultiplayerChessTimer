@implements IDisposable
@inject GameTimerState StateContainer

<MudPaper 
    Height="@height"
    Class="d-flex flex-column align-center justify-center mud-width-full"
    Style="@stylePaper"
>
    <MudButton 
        Color="@colour" 
        Variant="Variant.Filled" 
        Class="@btnClass"
        Style="@styleButton"
        DisableElevation="StateContainer.EnableColours"
        @onclick="OnClick">@currentTime</MudButton>
</MudPaper>

@code {

    [Parameter]
    public int TimerIndex { get; set; }

    private string height {
        get => HelperFunctions.GetButtonHeight(StateContainer);
    }

    private string stylePaper
    {
        get => HelperFunctions.GetButtonPaperStyle(StateContainer, TimerIndex);
    }

    private string styleButton
    {
        get => HelperFunctions.GetButtonStyle(StateContainer);
    }

    private string btnClass
    {
        get => HelperFunctions.GetButtonClass(StateContainer, TimerIndex);
    }

    private Color colour
    {
        get {
            if (StateContainer.GetPlayerTimeLeft(TimerIndex) <= TimeSpan.Zero)
                return Color.Error;

            if (StateContainer.CurrentPlayerIndex != TimerIndex)
                return Color.Primary;

            if (StateContainer.Paused)
                return Color.Warning;

            return Color.Success;
        }
    }

    private string currentTime {
        get 
        {
            var timeLeft = StateContainer?.GetPlayerTimeLeft(TimerIndex);

            if (timeLeft == null || StateContainer == null)
                return "ERROR";

            if (timeLeft <= TimeSpan.Zero)
                return StateContainer.GetFinishedPlayerPlace(TimerIndex);

            if (timeLeft < TimeSpan.FromMinutes(1))
                return timeLeft.Value.ToString(@"s\.ff");

            return timeLeft.Value.ToString(@"m\:ss");
        }
    }

    protected override void OnInitialized()
    {        
        StateContainer.OnGameStateChanged += StateHasChanged;
        StateContainer.OnSettingsStateChange += StateHasChanged;
    }

    private void OnClick()
    {
        StateContainer.NextPlayer(TimerIndex);
    }

    public void Dispose()
    {
        StateContainer.OnGameStateChanged -= StateHasChanged;
        StateContainer.OnSettingsStateChange += StateHasChanged;
    }
}
