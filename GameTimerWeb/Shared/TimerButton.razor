@implements IDisposable
@inject GameTimerState StateContainer

<MudPaper 
    Height="@height"
    Class="d-flex flex-column align-center justify-center mud-width-full"
    Style="@style"
>
    <MudButton 
        Color="@colour" 
        Variant="Variant.Filled" 
        Class="@btnClass"
        Style="height:100%; font-size:xx-large"
        DisableElevation="StateContainer.EnableColours"
        @onclick="OnClick">@currentTime</MudButton>
</MudPaper>

@code {

    [Parameter]
    public int TimerIndex { get; set; }

    private int numRows { get => (int)Math.Ceiling(((double)StateContainer.CurrentNumberOfPlayers) / 2); }

    private string height {
        get => $"{80M / numRows}vh";
    }

    private string margin {
        get => $"{5M / numRows}vh";
    }

    private System.Drawing.Color borderColor;

    private string style
    {
        get {
            string border = "";
            if (StateContainer.EnableColours)
			{
				var playerColour = StateContainer.GetPlayerColour(TimerIndex);
				border = $"border: 5px solid #{playerColour.R:X2}{playerColour.G:X2}{playerColour.B:X2};";
			}
            return $"margin-top:{margin}; margin-bottom:{margin}; {border}";
        }
    }

    private string btnClass
    {
        get
        {
            bool isRightColumn = (double)TimerIndex < ((double)StateContainer.CurrentNumberOfPlayers) / 2;
            string rotateClass = isRightColumn ? "btn-txt-rotate-270" : "btn-txt-rotate-90";
            return $"mud-width-full {rotateClass}";
        }
    }

    private Color colour
    {
        get {
            if (StateContainer.GetPlayerTimeLeft(TimerIndex) <= TimeSpan.Zero)
                return Color.Error;

            if (StateContainer.CurrentPlayerIndex != TimerIndex)
                return Color.Primary;

            if (StateContainer.Paused)
                return Color.Warning;

            return Color.Success;
        }
    }

    private string currentTime {
        get 
        {
            var timeLeft = StateContainer?.GetPlayerTimeLeft(TimerIndex);

            if (timeLeft == null)
                return "ERROR";

            if (timeLeft < TimeSpan.FromMinutes(1))
                return timeLeft.Value.ToString(@"ss\.ff");
                
            return timeLeft.Value.ToString(@"mm\:ss");
        }
    }

    protected override void OnInitialized()
    {        
        StateContainer.OnGameStateChanged += StateHasChanged;
        StateContainer.OnSettingsStateChange += StateHasChanged;
    }

    private void OnClick()
    {
        StateContainer.NextPlayer(TimerIndex);
    }

    public void Dispose()
    {
        StateContainer.OnGameStateChanged -= StateHasChanged;
        StateContainer.OnSettingsStateChange += StateHasChanged;
    }
}
