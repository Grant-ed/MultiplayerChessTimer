@inherits LayoutComponentBase
@implements IDisposable
@inject GameTimerState GameTimer
@inject IDialogService DialogService
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage

<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <style>
        .btn-txt-rotate-90 .mud-button-label {
            transform: rotate(90deg);
        }
        .btn-txt-rotate-270 .mud-button-label {
            transform: rotate(270deg);
        }
        .eat-the-rainbow p {
            background: linear-gradient(to right, orange , yellow, green, cyan, blue, violet);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
    </style>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Stop" Color="Color.Error" Variant="Variant.Filled" Disabled="@resetBtnDisabled" OnClick="GameTimer.InitializeGameTimer" />
        <MudSpacer />
        <MudIconButton Icon="@PauseButtonIcon" Color="Color.Primary" Variant="Variant.Filled" Disabled="@gameNotStarted" OnClick="PauseResumeGame" />
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="@HelperFunctions.GetDirectionIconColor(GameTimer)" Variant="Variant.Filled" OnClick="GameTimer.ReverseDirection" Style="@HelperFunctions.GetDirectionStyle(GameTimer)" />
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Primary" Variant="Variant.Filled" Disabled="@gamePlaying" OnClick="OpenSettings" />
    </MudAppBar>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.False" Class="px-3">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private bool _isDarkMode;
    private MudThemeProvider? _mudThemeProvider;

    bool _playing { get => !GameTimer.Paused; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        LoadGameTimerSettingsFromLocalStorage();
        GameTimer.InitializeGameTimer();
        GameTimer.OnGameStateChanged += StateHasChanged;
        GameTimer.OnSettingsStateChange += SaveGameTimerSettingsToLocalStorage;
    }

    public void Dispose()
    {
        GameTimer.OnGameStateChanged -= StateHasChanged;
        GameTimer.OnSettingsStateChange -= SaveGameTimerSettingsToLocalStorage;
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //_isDarkMode = await (_mudThemeProvider?.GetSystemPreference() ?? new Task<bool>(() => true));
            _isDarkMode = true;
            StateHasChanged();
        }
    }

    private void LoadGameTimerSettingsFromLocalStorage()
    {
        if (!localStorage.ContainKey(GameTimerSettings.LOCAL_STORAGE_KEY))
            return;

        try
        {
            var settings = localStorage.GetItem<GameTimerSettings>(GameTimerSettings.LOCAL_STORAGE_KEY);
            GameTimer.Settings = settings;
        }
        catch (Exception e)
        {
            Console.WriteLine($"Could not load settings from local storage due to {e.GetType()}. {e.Message}");
        }
    }

    private void SaveGameTimerSettingsToLocalStorage()
    {
        localStorage.SetItem<GameTimerSettings>(GameTimerSettings.LOCAL_STORAGE_KEY, GameTimer.Settings);
    }

    private bool gameNotStarted { get => GameTimer.CurrentPlayerIndex == null && GameTimer.PlayerFinishedPlaces.Any() == false; }
    private bool resetBtnDisabled { get => gameNotStarted || gamePlaying; }
    private bool gamePlaying { get => !GameTimer.Paused; }
    private string PauseButtonIcon
    {
        get => GameTimer.Paused ? Icons.Material.Filled.PlayArrow : Icons.Material.Filled.Pause;
    }
    
    private void PauseResumeGame()
    {
        if (gameNotStarted)
            return;

        if (GameTimer.Paused)
        {
            GameTimer.ResumeGameTimer();
        }
        else
        {
            GameTimer.PauseGameTimer();
        }
    }

    private void OpenSettings()
    {
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };
        DialogService.Show<GameTimerWeb.Dialogs.SettingsDialog>("Settings", closeOnEscapeKey);
    }
}