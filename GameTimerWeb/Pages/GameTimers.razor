@page "/"
@implements IDisposable
@inject GameTimerState GameTimer
@inject IDialogService DialogService

<PageTitle>Multiplayer Chess Clock</PageTitle>

<MudGrid Spacing="0">
    @for (int i = 0; i < numPlayers; i++)
    {
        int playerIndex = HelperFunctions.PlayerNumFromGridItemIndex(i, numPlayers);
                
        <MudItem xs="6" Class="px-3">
            <TimerButton TimerIndex="@playerIndex" />
        </MudItem>
    }
    
    @if(GameTimer.BigReverseButton)
    {
        <MudItem xs="12" Class="px-3">
            <MudPaper Height="@HelperFunctions.GetButtonHeight(GameTimer)"
                Class="d-flex flex-column align-center justify-center mud-width-full"
                Style="@HelperFunctions.GetButtonPaperStyle(GameTimer, null)" >
                <MudIconButton 
                    Color="@HelperFunctions.GetDirectionIconColor(GameTimer)" 
                    Variant="Variant.Filled" 
                    Icon="@Icons.Material.Filled.Refresh"
                    Class="@HelperFunctions.GetButtonClass(GameTimer, null)"
                    Style="@ReverseButtonStyle"
                    OnClick="GameTimer.ReverseDirection">
                </MudIconButton>
            </MudPaper>
        </MudItem>
    }
</MudGrid>


@code {
    Timer? gameClock;

    private int numPlayers
    {
        get => GameTimer?.NumberOfPlayersSetting ?? 0;
    }

    protected override void OnInitialized()
    {
        GameTimer.OnGameStateChanged += StateHasChanged;
        GameTimer.OnSettingsStateChange += InitGameState;
        gameClock = new Timer(GameTimer.Tick, GameTimer.timerSignal, GameTimerState.CLOCK_TICKSPEED, GameTimerState.CLOCK_TICKSPEED);
    }

    public void Dispose()
    {
        GameTimer.OnGameStateChanged -= StateHasChanged;
        GameTimer.OnSettingsStateChange -= InitGameState;
        gameClock?.Dispose();
    }

    private void InitGameState()
    {
        GameTimer.InitializeGameTimer();
        StateHasChanged();
    }

    private void OpenSettings()
    {
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };
        DialogService.Show<GameTimerWeb.Dialogs.SettingsDialog>("Settings", closeOnEscapeKey);
    }

    private void EscapeKey(KeyboardEventArgs e)
    {
        if (e.Code == "Escape")
        {
            OpenSettings();
        }
    }

    private string ReverseButtonStyle {
        get {
            return $"{HelperFunctions.GetButtonStyle(GameTimer)} {HelperFunctions.GetDirectionStyle(GameTimer)}";
        }
    }
}
